

##' .. content for \description{} (no empty lines) ..
##'
##' .. content for \details{} ..
##' @title 
##' @param MA 
##' @param ... 
##' @return 
##' @author Emanuel Heitlinger

setMethod("sortAmplicons", "MultiAmplicon", function(MA, ...){
    data <- matrix(0,
                   nrow=nrow(MA),
                   ncol=ncol(MA))
    ## colnames are sample names taken from file names
    colnames(data) <- colnames(MA)
    ## rownames have to come from (matched) primers
    for(i in seq_along(Files@readsF)) {        
        tmpbaseF <- paste0(tempfile(), basename(readsF))
        tmpbaseR <- paste0(tempfile(), basename(MA@PairedReadFileSet@readsR[[i]]))
        f <- FastqStreamer(Files@readsF[[i]], n = n)
        r <- FastqStreamer(Files@readsR[[i]], n = n)
        ## request forward and reverse file simultaneously
        while(length(suppressWarnings(Ffq <- yield(f))) &&
              length(suppressWarnings(Rfq <- yield(r)))){
                  fM <- lapply(MA@.uniqueF, function(x){
                      as.vector(isMatchingStartingAt(x, sread(Ffq),
                                                     fixed=FALSE))
                  })
                  rM <- lapply(pairs@.uniqueR, function(x){
                      as.vector(isMatchingStartingAt(x, sread(Rfq),
                                                     fixed=FALSE))
                  })
              }
    }
    ## matches <- sapply(map, 1, function(x){
    ##     map.primerF <- as.numeric(x["map.pF"])
    ##     map.primerR <- as.numeric(x["map.pR"])
    ##     select <- fM[[map.primerF]] & rM[[map.primerR]]
    ##     tmppathF <- paste0(tmpbaseF, x[["nF"]], ":", x[["nR"]], ".fastq")
    ##     tmppathR <- paste0(tmpbaseR, x[["nF"]], ":", x[["nR"]], ".fastq")
    ##     lengthF<- as.numeric(x[["l.pF"]])
    ##     F <- narrow(Ffq[select],
    ##                 lengthF, width(Ffq[select]))
    ##     print(paste0(tmppathF, lengthF))
    ##     lengthR<- as.numeric(x[["l.pR"]])
    ##     R <- narrow(Rfq[select],
    ##                 as.numeric(x[["l.pR"]]), width(Rfq[select]))
    ##     print(paste0(tmppathR, lengthR))
    ##     writeFastq(R, file=tmppathR, mode="a")
    ##     number.matches <- length(select[select==TRUE])
    ##     return(number.matches)
    ## })
    ## ## need to add over the while loop because of fastq streaming 
    ## data[, basename(Files@readsF[[i]])] <-
    ##     data[, basename(Files@readsF[[i]])] + matches
    return(new("MultiAmplicon",
               PrimerPairsSet = PrimerPairsSet,
               PairedReadFileSet = PairedReadFileSet,
               matrix=data))
})
